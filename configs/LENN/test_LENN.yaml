# ======================================================== #
# Example Configuration file for the training of the model #
# ======================================================== #

# #mode: 'train'
# mode: 'evaluate'

# Name of the model to use and the input dimension
model:
  #name: 'LorentzInteractionNetwork'
  #name: 'ResidualGNN1'
  name: 'SimpleGCN'
  # input_dim: 8
  # hidden_dim: 14
  # output_dim: 1

# Path to the data
data:
  signal_path: /scratch4/levans/tth-network/Datasets/test/ttH_tester_file.h5
  background_path: /scratch4/levans/tth-network/Datasets/test/ttbb_tester_file.h5
  save_graph_data: True
  path_to_save_graph: /scratch4/levans/tth-network/Datasets/graphs/test/    # make dir if does not exist!
  use_saved_graph_data: True
  plot_inputs: False
  plot_save_path: /scratch4/levans/tth-network/plots/

Network_type:
  - LENN

# Example features to be used for training the model

features:
  node_features:
    - jet_pt_1
    - jet_pt_2
    - jet_pt_3
    - jet_pt_4
  edge_features:
    - dRbb_avg_Sort4
  global_features:
     - HT_all

# add safety guard for duplicate features! :D

# Preparation: Coming soon!
# -

# Hyperparameters for training the model
training:
  num_epochs: 20            # number of epochs to train the model, which are the number of times the model sees the entire training dataset
  learning_rate: 0.00001   # learning rate for the optimiser, which is a technique to update the weights
  weight_decay: 0.001       # L2 regularization, which is a technique to reduce overfitting
  batch_size: 2            # batch size for training, which is the number of samples per gradient update
  patience: 7               # epochs before early stopping/learning rate decay
  early_stopping: True      # early stopping if validation loss does not improve
  use_scheduler: False       # learning rate decay if validation loss does not improve
  factor: 0.5               # factor by which the learning rate will be reduced, if use_scheduler is True
  initialise_weights: True  # initialise weights of the model
  balance_classes: True     # use class weights to balance the dataset
  criterion: 'BCELoss'      # loss function to use
  use_cosine_burnin: True          # use burnin for the learning rate scheduler
  model_save_path: /scratch4/levans/tth-network/models/outputs/
  #save_model: False
  #model_save_path: 'models/'
  #save_frequency: 1
  #save_plots: False

evaluation:
  use_saved_model: False
  saved_model_path: /scratch4/levans/tth-network/models/outputs/model_LENN.pt

  # add check-points (use pickle files and save model after each epoch) etc.